<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
        "http://www.w3.org/TR/html4/loose.dtd">
<HTML lang="pl">
<HEAD>
<META HTTP-EQUIV="Content-Type"       CONTENT="text/html; charset=ISO-8859-2">
<META HTTP-EQUIV="Content-Language"   CONTENT="pl">
<META http-equiv="Content-Style-Type" content="text/css">
<META HTTP-EQUIV="X-Frame-Options"    CONTENT="DENY">
<LINK rel="stylesheet" href="asm.css" type="text/css">

<TITLE> Krótki kurs szyfrowania </TITLE>
<link rel="Start"    hreflang="pl" lang="en" href="index.htm">
<link rel="Contents" hreflang="pl" lang="en" href="index.htm">

<META NAME="Author" CONTENT="Bogdan D.">
<META NAME="Description" CONTENT="Krótki przewodnik po wspó³czesnej kryptografii">
<META NAME="Keywords" CONTENT="szyfr, deszyfr, PGP, GnuPG, GPG, certyfikat, S/MIME, PKCS,
	 crypto, kryptologia, kryptografia, RSA, El-Gamal, Pretty Good Privacy, ochrona, bezpieczeñstwo">
<META NAME="Language" CONTENT="pl">
<META NAME="Generator" CONTENT="Kwrite">
<meta http-equiv="Last-Modified" content="Tue, Jan 18 2011 18:00:01 CEST">
</HEAD><BODY>

<h1 class="nag">Jak nauczyæ siê szyfrowania</h1>
<BR>
Na pewno ka¿demu z Was zdarzy³o siê kiedy¶ wys³aæ e-maila, którego tre¶æ powinna byæ
przeczytana wy³±cznie przez odbiorcê. Móg³ to byæ list s³u¿bowy, zawieraj±cy
wa¿ne dane finansowe lub list bardzo prywatny. Na pewno nie chcieliby¶cie, by taki
list by³ przeczytany przez niew³a¶ciw± osobê: szpiega przemys³owego,
w¶cibskie rodzeñstwo itd.<BR>
 Tymczasem, nawet je¶li odbiorca chroni
swój program pocztowy has³em, to i tak Wasz list, zanim do niego trafi,
przechodzi (w postaci jawnej) przez jakie¶ 20-30 serwerów.<BR>

 Nie wierzycie? Wykonajcie polecenie
<code><span lang="en">traceroute</span> smtp.wasz.serwer.pocztowy.pl</code>
 (pod <span lang="en">Windows</span> jest <span class="b" lang="en">tracert</span>).<BR>

To polecenie pokazuje, jak± drogê przebywaj± pakiety (a wiêc i list), zanim dotr± do
Waszego serwera pocztowego. Potem jeszcze wasz list przechodzi od tego serwera do
serwera pocztowego odbiorcy, a potem do niego samego. D³uga trasa, nieprawda¿?
A do tego na ka¿dym skrzy¿owaniu (routerze) czeka potencjalne zagro¿enie.<BR>
Ten krótki artyku³ u¶wiadomi Wam, <em class="wazne">jak ³atwo jest chroniæ</em> swoj± pocztê przed
nieodpowiednimi osobami oraz daæ odbiorcy ca³kowit± pewno¶æ, ¿e dany list pochodzi
w³a¶nie od Was.<BR><BR>

Spis tre¶ci:<br>
<ul>
 <li><a hreflang="pl" href="#smime" tabindex="1">Certyfikaty cyfrowe S/MIME</a></li>
 <li><a hreflang="pl" href="#pgp">Klucze PGP (<span lang="en">Pretty Good Privacy</span>)</a></li>
 <li><a hreflang="pl" href="#dane">Szyfrowanie danych na dysku</a></li>
 <li><a hreflang="pl" href="#trans">Zabezpieczanie danych przesy³anych przez sieæ</a></li>
 <li><a hreflang="pl" href="#jakdziala">Jak to wszystko naprawdê dzia³a</a></li>
</ul>




<!--  ===================================================================================== -->

<BR><BR>
<HR>
<h2 class="nag"><a name="smime" id="smime">S/MIME</a> (certyfikaty cyfrowe, identyfikatory cyfrowe)</h2>
<BR>
<a href="#pgp" class="bezdruk" hreflang="pl">(przeskocz do PGP)</a>
<BR><BR>

Skrót S/MIME oznacza <span lang="en">Secure Multipurpose Internet Mail Extensions</span>. Jest to
pewien standard, rozszerzaj±cy normalne MIME o mo¿liwo¶ci szyfrowania.
S/MIME opiera siê na <span class="b">certyfikatach cyfrowych</span>, które zawieraj±
 informacje o tym,
kto jest w³a¶cicielem certyfikatu oraz klucze: prywatny i publiczny danej osoby.<BR><BR>

Certyfikaty w standardzie
 <Acronym title="Public Key Cryptography System" lang="en">PKCS</acronym>, o których tu mowa,
  <em class="wazne">NIE</em> s± zgodne z kluczami w standardzie
 <acronym title="Pretty Good Privacy" lang="en">PGP</acronym>/<span lang="en">Open</span>PGP, które omówiê pó¼niej.
<BR><BR>

<span class="b">Klucz prywatny</span> - s³u¿y do odszyfrowywania odebranych wiadomo¶ci oraz do
 cyfrowego podpisywania wysy³anych przez nas
wiadomo¶ci. Dziêki temu odbiorca wie, ¿e ich <em class="wazne">tre¶æ nie zosta³a zmieniona</em>
 po drodze oraz ¿e wiadomo¶æ rzeczywi¶cie <em class="wazne">pochodzi od Was</em>.
Musi wiêc byæ <em class="wazne">chroniony za wszelk± cenê!</em><BR><BR>

<span class="b">Klucz publiczny</span> - mo¿e byæ dowolnie rozdawany, gdy¿ to on umo¿liwia innym
wysy³anie nam zaszyfrowanych wiadomo¶ci oraz sprawdzania cyfrowego podpisu w
wiadomo¶ciach wys³anych przez nas. <em class="wazne">Musimy posiadaæ klucz publiczny
 (certyfikat publiczny) osoby, do której chcemy wysy³aæ zaszyfrowane wiadomo¶ci.</em>

<BR><BR>

Aby móc wysy³aæ odbiorcy zaszyfrowane wiadomo¶ci, wystarczy posiadaæ jego
certyfikat publiczny (który zawiera tak¿e klucz publiczny). Samemu teoretycznie nie
trzeba mieæ certyfikatu, ale wiêkszo¶æ programów pocztowych odmówi szyfrowania listów
bez posiadania w³asnego certyfikatu, bo nie bêdzie ich potem mo¿na odszyfrowaæ.<BR>
<BR>
Ze wzglêdów bezpieczeñstwa, nie mo¿na te¿ szyfrowaæ do odbiorcy, którego certyfikat straci³
 wa¿no¶æ.
<BR><BR>

A jak zdobyæ dla siebie certyfikat?<BR>
Jest kilka sposobów:
<BR><a href="#szyfry00_1" class="bezdruk">(przeskocz sposoby)</a>
<UL>
 <LI>wykupiæ w znanej firmie, na przyk³ad
     <A HREF="http://www.verisign.com" hreflang="en" lang="en">Verisign</A>,
     <A HREF="http://www.comodo.com" hreflang="en" lang="en">Comodo</A>,
     <A HREF="http://www.thawte.com" hreflang="en" lang="en">Thawte</A>,
     <A HREF="http://www.globalsign.com" hreflang="en" lang="en">GlobalSign</A>. W Polsce
     certyfikaty wydaje na przyk³ad <A HREF="http://www.certum.pl" hreflang="pl">Unizeto Certum</A>.<BR>
     Je¶li certyfikat ma byæ bardzo wiarygodny (a wiêc i dro¿szy), to nale¿y podaæ
     firmie du¿o szczegó³ów o sobie. W zamian dostajemy certyfikat oznaczony du¿ym
     zaufaniem i rozpoznawany przez wiêkszo¶æ programów pocztowych.<BR><BR></LI>

 <LI>dostaæ za darmo w znanej firmie, na przyk³ad
     <A HREF="http://www.cacert.org" hreflang="en" lang="en">CAcert</A>,
     <A HREF="http://www.comodo.com" hreflang="en" lang="en">Comodo</A>.<BR>
     Zazwyczaj taki certyfikat bêdzie mia³
     klucz ¶redniej d³ugo¶ci (a wiêc i ¶redniej sile szyfrowania), na przyk³ad 512 bitów,
     zwykle nie bêdzie w nim naszego imienia, tylko adres e-mail (który zawsze musi byæ),
     a certyfikat (skoro nie podali¶my ¿adnych danych pozwalaj±cych na identyfikacjê)
     bêdzie mia³ ni¿szy stopieñ zaufania i krótki okres wa¿no¶ci. Dlatego polecam
     Comodo, gdy¿ mo¿na tam wpisaæ swoje imiê i <em class="wazne">wybraæ d³ugo¶æ klucza</em>,
     a certyfikat bêdzie <em class="wazne">wa¿ny przez rok</em> (co jest do¶æ d³ugim okresem
     w porównaniu z innymi).<BR><BR></LI>

 <LI>wyrobiæ sobie samemu - wystarczy dowolny system operacyjny z zainstalowanym
     pakietem <A HREF="http://www.openssl.org" hreflang="en" lang="en">OpenSSL</A> na przyk³ad Linux (ale
     s± te¿ wersje <A HREF="http://www.slproweb.com/products/Win32OpenSSL.html" hreflang="en"
     ><span lang="en">OpenSSL</span> dla <span lang="en">Windows</span></A>).
     <BR>Zalety takiego rozwi±zania s± du¿e:
  <UL>
   <LI>mo¿na wybraæ klucz dowolnej d³ugo¶ci (na przyk³ad 4096 bitów!)</LI>
   <LI>certyfikat bêdzie zawiera³ nasze imiê i wszystkie dane, które chcemy umie¶ciæ</LI>
   <LI>mo¿e byæ wa¿ny nawet przez 30 lat!</LI>
  </UL>
     Jedyn± wad± bêdzie to, ¿e nie bêdzie zaufany przez ¿adn± znan± firmê, ale z tym
     te¿ mo¿na sobie poradziæ.</LI>
</UL>
<a name="szyfry00_1" id="szyfry00_1">Jako ¿e wyrobienie certyfikatu przez
 <acronym title="World Wide Web" lang="en">WWW</acronym></a> trwa tylko kilka minut i jest do¶æ proste,
nie bêdê siê tym zajmowa³. Firmy wydaj±ce posiadaj± do¶æ dobre instrukcje, co nale¿y wykonaæ.<BR>
Zamiast tego opiszê tutaj szczegó³owo,
co nale¿y zrobiæ, aby wyrobiæ go sobie samemu.<BR><BR>

Wyrabianie certyfikatu z wykorzystaniem oprogramowania <span lang="en">OpenSSL</span>:
<OL>
 <LI>Wykonanie certyfikatu podpisanego przez samego siebie, o 2048-bitowym kluczu
 	<acronym title="Rivest-Shamir-Adleman" lang="en">RSA</acronym>
	(oficjalnie zalecana minimalna d³ugo¶æ to 1024 bity), wa¿nego
     przez oko³o 30 lat:
	<BR><a href="#szyfry01" class="bezdruk">(przeskocz wyrabianie certyfikatu prywatnego)</a><br>
     <code lang="en">openssl req -x509 -days 10950 -newkey rsa:2048 -keyout cert1_key.pem -out cert1_cert.pem</code>
	<br><br>
	<em class="wazne">UWAGA</em>: podany tu czas wa¿nosci certyfikatu w dniach (10950) jest bliski
	górnemu limitowi (czy to limit OpenSSL, czy programów pocztowych, czy te¿ samego standardu).
	Przekroczenie tej liczby mo¿e spowodowaæ, ¿e certyfikat bêdzie rozpoznawany, ale
	bezu¿yteczny!
	<br><br>
     Nale¿y podaæ tyle informacji o sobie, aby certyfikat by³ wiarygodny. Zalecam wpisaæ:
     <UL>
      <LI>adres e-mail (bez tego w ogóle nie bêdzie mo¿na korzystaæ z certyfikatu). Je¶li posiadacie wiêcej
          ni¿ jeden adres e-mail, to na ka¿dy z tych adresów niestety musicie wyrobiæ osobny certyfikat.</LI>
      <LI>swoje pe³ne imiê i nazwisko</LI>
      <LI>miasto zamieszkania, region, kraj</LI>
     </UL>
     Aby ca³a zabawa mia³a sens, nasz klucz prywatny musimy ochroniæ
      <em class="wazne">dobrym has³em</em> (czyli:
     co najmniej 8 znaków, litery du¿e i ma³e, cyfry i znaki specjalne).<BR><BR>


     <em class="wazne">Plik cert1_key.pem zawiera wasz klucz prywatny, musi wiêc byæ dobrze chroniony.</em>
     <BR><BR>
     Wasz <em class="wazne">klucz prywatny nigdy nie zostanie wys³any</em> przez ¿aden wiarygodny
      program pocztowy wbrew Waszej woli.

  <BR><BR></LI>

 <LI><a name="szyfry01" id="szyfry01">Wyeksportowanie naszego certyfikatu</a> do formatu PKCS#12,
 	 przyjmowanego przez wiêkszo¶æ programów pocztowych:
	<BR><a href="#szyfry02" class="bezdruk">(przeskocz eksport certyfikatu)</a><br>
     <code lang="en">openssl pkcs12 -export -in cert1_cert.pem -inkey cert1_key.pem -out cert1.p12 -name &quot;Moj certyfikat&quot;</code>
	<br><br>
     W tracie wykonywania tego polecenia bêdziemy poproszeni o has³o chroni±ce nasz klucz prywatny
     (to, które wpisali¶my w kroku 1) oraz o nowe has³o eksportowe, chroni±ce ca³y plik P12. Je¶li nie
     zamierzacie po wszystkim skasowaæ pliku P12 (zachowuj±c pliki .pem), to w dalszym ci±gu
     obowi±zuj± powy¿sze regu³y <em class="wazne">dobrego has³a</em>.<BR><BR>

     <em class="wazne">Plik cert1.p12 zawiera wasz klucz prywatny i publiczny, musi wiêc byæ
      dobrze chroniony.</em><BR><BR>

     Mo¿ecie wej¶æ na
     <A HREF="http://www.certum.pl/pl/dokumentacja/pu/index.html" hreflang="pl">strony z dokumentacj± Certum</A>
     lub na
     <A HREF="http://www.signet.pl/download/index.html" hreflang="pl">strony Signet</A>
     po instrukcje, jak zainstalowaæ i korzystaæ z certyfikatu w swoim programie pocztowym
      (wystarczy go zainstalowaæ w dziale <q>certyfikaty osobiste</q> lub podobnym).

	<BR><BR>

     Je¶li korzystacie z
     <A HREF="http://www.thunderbird.pl" hreflang="pl">Mozilli Thunderbirda</A>,
      to najpierw zainstalujcie plik DER (patrz ni¿ej).<BR>
     Potem wybierzcie Edycja(Narzêdzia)-->gt; Preferencje-->gt; Zaawansowane-->gt;Menad¿er certyfikatów-->gt;
       Twoje certyfikaty-->gt; Importuj. Nale¿y podaæ has³o chroni±ce plik P12 oraz has³o
       <q>G³ównego Urz±dzenia zabezpieczaj±cego</q> (<span lang="en">Software Security Device</span>).
       To drugie bêdzie s³u¿yæ
       do obs³ugi wszystkich certyfikatów (aby¶cie nie musieli pamiêtaæ wszystkich hase³ do
       kluczy prywatnych).<BR>
     Potem ju¿ tylko Edycja-->gt; Konfiguracja kont-->gt; Zabezpieczenia (pod jakim¶ kontem)-->gt;
      Wybierz certyfikat i
     <q>Podpisz wiadomo¶ci cyfrowo (domy¶lnie)</q>.<BR><BR>
      Mo¿emy ju¿ cyfrowo podpisywaæ
     wiadomo¶ci, ale nikt do nas nie bêdzie szyfrowa³, je¶li nie rozdamy innym naszego certyfikatu
     publicznego.
     <BR><BR></LI>

 <LI><a name="szyfry02" id="szyfry02">Niektóre programy pocztowe bêd± wymagaæ</a>,
 	 aby nasz certyfikat by³ wystawiony przez znan± im
     firmê. Dlatego zainstalujemy im nasz certyfikat jako certyfikat firmy wystawiaj±cej
     (<span lang="en">Certificate Authority</span>, CA). Oto, co nale¿y zrobiæ:
	<BR><a href="#szyfry03" class="bezdruk">(przeskocz wyrabianie certyfikatu wystawcy)</a><br>
     <code lang="en">openssl x509 -in cert1_cert.pem -outform DER -out cert1_cert.der</code>
	<br><br>
     Otrzymany plik DER instalujemy w programie pocztowym <em class="wazne">w miejscu
      przeznaczonym dla wystawców
     certyfikatów, z pe³nym zaufaniem</em> i nasz certyfikat zdobywa zaufanie programu.
   <BR><BR></LI>

 <LI><a name="szyfry03" id="szyfry03">Wyrobienie certyfikatu publicznego</a> odbywa siê tak:
	<BR><a href="#szyfry04" class="bezdruk">(przeskocz wyrabianie certyfikatu publicznego)</a><br>
     <code lang="en">openssl pkcs12 -in cert1.p12 -out cert1_pub.pem -nokeys -clcerts</code><br>
     <code lang="en">openssl x509 -in cert1_pub.pem -outform DER -out cert1_pub.cer</code><br>
     <code lang="en">openssl crl2pkcs7 -nocrl -certfile cert1_pub.pem -outform DER -out cert1_pub.p7b</code>
		<br><br>
	Otrzymane w ten sposób pliki PEM, CER i P7B zawieraj± <span class="b">ten sam</span>
     	 Wasz certyfikat PUBLICZNY (zawieraj±cy klucz publiczny),
      tylko w ró¿nych formatach, odpowiednich dla ró¿nych programów pocztowych.<BR>
     Te pliki umieszczajcie wszêdzie, gdzie to jest tylko mo¿liwe tak, by
     jak najwiêcej osób mia³o do nich dostêp (na przyk³ad na swojej stronie WWW).<BR>
     Mo¿liwe jest, ¿e wraz ze swoim certyfikatem publicznym bêdziecie musieli
      <em class="wazne">wysy³aæ te¿ certyfikat wystawcy</em>, utworzony punkt wcze¶niej.
	<BR><BR></LI>

 <LI><a name="szyfry04" id="szyfry04">Wykonanie certyfikatu g³ównego</a> do podpisywania innych.<BR>
	<a href="#szyfry05" class="bezdruk">(przeskocz wyrabianie certyfikatu g³ównego)</a><Br>
 	Je¶li po wykonaniu powy¿szych punktów <em class="wazne">dzia³a</em> szyfrowanie,
 	podpisywanie, importowanie
 	waszych certyfikatów u odbiorcy (czyli wszystko jest w porz±dku), to pomiñcie ten punkt.<BR><BR>

	Mo¿e siê zdarzyæ ¿e mimo zaimportowania (Waszego) certyfikatu wystawcy, program pocztowy
	 odbiorcy dalej uparcie nie chce zaimportowaæ Waszego certyfikatu publicznego. W takim przypadku
	 nie kasujcie od razu tamtych plików, tylko czytajcie dalej (je¶li jednak skasowali¶cie, mo¿ecie
 	 sobie wyrobiæ od nowa, wed³ug punktu 1, lub od razu jako ¿±danie podpisania certyfikatu,
 	  pomijaj±c opcjê <code>-x509</code> w punkcie 1).<BR><BR>

	Musicie sobie wyrobiæ mocny certyfikat g³ówny
	 i u¿yæ go do podpisania certyfikatów, które wyrobili¶cie na poszczególne adresy e-mail.<BR>
	Certyfikat g³ówny to nic innego jak samopodpisany certyfikat, wiêc
	 <em class="wazne">powtarzamy czynno¶ci z punktów 1 i 3</em>
	 powy¿ej. Jako ¿e certyfikatu g³ównego nie polecam do szyfrowania poczty, mo¿na pomin±æ adres
	 e-mail, oraz daæ lepszy klucz (na przyk³ad 4096 bitów).<BR><BR>

	Teraz certyfikaty na ka¿d± skrzynkê, które wyrobili¶cie wcze¶niej, zamieniamy na
	 ¿±dania podpisania
	 certyfikatu, dziêki czemu bêdzie je mo¿na podpisaæ naszym ¶wie¿ym certyfikatem g³ównym:<br>
	<code lang="en">openssl x509 -x509toreq -signkey cert2_klucz.pem -in cert2_cert.pem -out cert2_req.pem</code>
	<br>Tak utworzone ¿±danie podpisujemy naszym certyfikatem g³ównym:<br>
	<code lang="en">openssl ca -days 10000 -cert cert_glowny.pem -keyfile cert_glowny_klucz.pem -in cert2_req.pem -out cert_nowy.pem</code>
	<br><br>
	<em class="wazne">UWAGA</em>: podany tu czas wa¿nosci certyfikatu w dniach (10000) jest bliski
	górnemu limitowi (czy to limit OpenSSL, czy programów pocztowych, czy te¿ samego standardu).
	Przekroczenie liczby 10950 mo¿e spowodowaæ, ¿e certyfikat bêdzie rozpoznawany, ale
	bezu¿yteczny i ¿adne podpisane nim certyfikaty nie bêd± mog³y byæ importowane przez
	programy pocztowe!
	<br><br>

	<br>Z plików cert_nowy.pem i cert2_klucz.pem (klucz bez zmian) tworzymy plik PKCS#12 (wed³ug punktu 2) dla naszego programu pocztowego
	 oraz certyfikaty publiczne dla odbiorców naszej poczty, wed³ug punktu 4. Odbiorcom naszej poczty dajemy swój nowy certyfikat publiczny
	 (na przyk³ad cert2.cer) i plik DER <em class="wazne">otrzymany z certyfikatu g³ównego</em> wed³ug punktu 3, który instalujemy te¿ u siebie
	 jako wystawcê certyfikatów (z pe³nym zaufaniem).

 	</LI>
</OL><BR><BR>

<a name="szyfry05" id="szyfry05">Wiêkszo¶æ programów pocztowych</a> <em class="wazne">zaimportuje
 automatycznie Wasz certyfikat</em>
 u odbiorcy, gdy po raz pierwszy otworzy on otrzyman± od Was wiadomo¶æ
 <em class="wazne">podpisan± cyfrowo</em>. Do cyfrowego podpisania wiadomo¶ci u¿ywany
  jest klucz prywatny, ale podczas tej operacji sam <em class="wazne">klucz prywatny NIGDY nie jest
 wysy³any</em>, jest bezpiecznie przechowywany przez program pocztowy.


<BR><BR> Osoby maj±ce Wasz
 certyfikat publiczny mog± do Was szyfrowaæ. Aby¶cie i Wy mogli to robiæ, musicie mieæ certyfikat
 publiczny odbiorcy. Najpro¶ciej jest poprosiæ tego kogo¶, aby przys³a³ Wam wiadomo¶æ podpisan± cyfrowo.
 Mo¿na te¿ wymieniæ siê certyfikatami publicznymi na dyskietkach/p³ytach lub wys³aæ jako za³±czniki do listów.
<BR>
 Od tej pory wasza korespondencja nie bêdzie mog³a byæ przeczytana ani sfa³szowana przez innych.
<BR><BR>
<em class="wazne">UWAGA:</em><BR>
Najlepiej wszystkie wytworzone pliki nale¿y zachowaæ
 w kilku bezpiecznych miejscach (na przyk³ad na p³ycie CD-R, któr± potem starannie schowamy). Najwa¿niejsze s±
 cert1_key.pem i cert1_cert.pem, bo z nich da siê odtworzyæ resztê.
<BR> <em class="wazne">NIGDY</em> nie nale¿y umieszczaæ swoich kluczy prywatnych na ¿adnych
 publicznie dostêpnych serwerach.
<BR><BR>
<BR><BR>







<!--  ===================================================================================== -->

Je¶li chcecie do kogo¶ rêcznie zaszyfrowaæ jaki¶ plik, niekoniecznie wysy³aj±c e-mail, mo¿ecie
 to zrobiæ na jeden z nastêpuj±cych sposobów.
<OL>

 <LI>Szyfrowanie kluczem publicznym odbiorcy i swoim (aby móc to potem rozszyfrowaæ),
 	 <span class="b">nierozs±dne bez podpisu</span>:
	<BR><a href="#szyfry06" class="bezdruk">(przeskocz rêczne szyfrowanie)</a><br>
	<code title="szyfrowanie">openssl smime -encrypt -in dane.txt -out dane.aes
	-from adres@nadawcy -to adres@odbiorcy
	-subject &quot;Tajna wiadomosc&quot; -aes256 cert_publ_odbiorcy1.pem cert_publ_odbiorcy2.pem </code>
	<br><br>
	Powy¿sza komenda ma byæ <span class="b">w jednej linijce</span>, a jako jeden
	 z certyfikatów odbiorców podaj <span class="b">swój certyfikat publiczny!</span><BR>
	Wad± tego podej¶cia jest to, ¿e wynik jest w postaci czê¶ci (lub ca³ej) gotowej
	 wiadomo¶ci e-mail, ale z tym te¿ mo¿na sobie poradziæ.<BR><BR>

	Opcja <CODE lang="en">-encrypt</CODE> oczywi¶cie w³±cza szyfrowanie.<BR>
	Opcje <CODE>-in</CODE> i <CODE lang="en">-out</CODE> okre¶laj± pliki, z których braæ dane do
	 zaszyfrowania i gdzie je po zaszyfrowaniu umie¶ciæ.<BR>
	Opcje <CODE>-from</CODE>, <CODE>-to</CODE> i <CODE lang="en">-subject</CODE> okre¶laj± odpowiednio:
	 adres nadawcy, adres odbiorcy i temat wiadomo¶ci (wynik tego polecenia mo¿na wys³aæ jak e-mail,
	 na przyk³ad przez sendmail).<BR>
	Opcja <CODE>-aes256</CODE> okre¶la typ u¿ytego szyfru: 256-bitowy
	 <acronym title="Advanced Encryption Standard" lang="en">AES</acronym>.<BR><BR>

	Odszyfrowanie odbywa siê tak:<br>
	<code>openssl smime -decrypt -in dane.aes -inkey nasz_klucz_pryw.pem -recip nasz_cert_publ.pem</code>
	<br>Opcja <CODE>-recip</CODE> okre¶la certyfikat publiczny odbiorcy (nasz).
	<BR><BR>
	</LI>

 <LI><a name="szyfry06" id="szyfry06">Szyfrowanie kluczem publicznym</a> odbiorcy i swoim oraz cyfrowe
 	 podpisanie danych:
	<BR><a href="#szyfry07" class="bezdruk">(przeskocz rêczne szyfrowanie z podpisem)</a><br>
	<code title="szyfrowanie z podpisem">openssl smime -sign -in dane.txt -signer nasz_cert_publiczny.pem -inkey nasz_klucz_pryw.pem
        | openssl smime -encrypt -out dane.aes
	-from adres@nadawcy -to adres@odbiorcy
	-subject &quot;Tajna wiadomosc&quot; -aes256 cert_publ_odbiorcy1.pem cert_publ_odbiorcy2.pem </code>
	<br><br>
	Powy¿sza komenda ma byæ <span class="b">w jednej linijce</span>, a jako jeden z
	 certyfikatów odbiorców podaj <span class="b">swój certyfikat publiczny!</span><BR>
	Zauwa¿ symbol potoku <CODE>|</CODE>, otrzymywany jako Shift+\.<BR>
	Podobnie jak wy¿ej, wynik jest w postaci gotowej wiadomo¶ci e-mail.<BR><BR>

	Opcja <CODE lang="en">-sign</CODE> powoduje cyfrowe podpisanie wiadomo¶ci.<BR>
	Opcje <CODE lang="en">-signer</CODE> i <CODE lang="en">-inkey</CODE> pozwalaj± wybraæ certyfikat i klucz podpisuj±cy.<BR><BR>

	Odszyfrowanie i weryfikacja odbywaj± siê tak:
	<BR><a href="#szyfry07_1" class="bezdruk">(przeskocz weryfikacjê i odszyfrowanie)</a><br>
	<code title="weryfikacja i odszyfrowanie">openssl smime -decrypt -in dane.aes -inkey nasz_klucz_pryw.pem -recip nasz_cert_publ.pem |
 		openssl smime -verify -CAfile plik_z_CA.pem -signer cert_publ_nadawcy.pem</code><br><br>
	  <a name="szyfry07_1" id="szyfry07_1">Opcja <CODE lang="en">-CAfile</CODE></a>
	 pozwala okre¶liæ plik z zaufanymi certyfikatami
	 (czasem po prostu wystarczy cert_publ_nadawcy.pem).

	<BR><BR>
	</LI>

 <LI><a name="szyfry07" id="szyfry07">Szyfrowanie na has³o</a> (szyfrem symetrycznym)
	<BR><a href="#szyfry08" class="bezdruk">(przeskocz szyfrowanie na has³o)</a><BR>
 	Najpierw sprawdzamy, jakie szyfry symetryczne obs³uguje nasz program openssl:<br>
 	<code lang="en">openssl list-cipher-commands</code><br><br>
 	Potem wybieramy jeden z nich, na przyk³ad <span lang="en">Blowfish</span> (bf). Szyfrowanie odbywa siê tak:<br>
 	<code lang="en">openssl enc -bf -a -salt -in dane.txt -out dane.txt.bf</code><br><br>
 	Opcja <CODE>-bf</CODE> w³±cza szyfrowanie w³a¶nie algorytmem Blowfish.<BR>
 	Opcja <CODE>-salt</CODE> wprowadza dodatkow± losowo¶æ do klucza generowanego z has³a. Zalecane!<BR>
 	Opcja <CODE>-a</CODE> w³±cza kodowanie zaszyfrowanych danych algorytmem BASE64, ¿eby zamiast
 	 <q>krzaczków</q>, w pliku wyj¶ciowym by³y normalne znaki
	 	<acronym title="American Standard Code for Information Interchange" lang="en">ASCII</acronym>.<BR><BR>
 	<em class="wazne">NIE</em> polecam szyfrów: IDEA, RC2, RC4, RC5 i dalszych
 	 RC, gdy¿ s± one objête patentami.<BR>
 	<em class="wazne">NIE</em> polecam szyfrów: des-cbc, des, des-cfb, des-ofb,
 	 des-ecb ze wzglêdu na s³ab± si³ê
 	 szyfrowania (klucz ma 56 bitów d³ugo¶ci, co na dzisiejsze standardy jest o wiele za ma³o).<BR>
 	W¶ród szyfrów mo¿e byæ wymieniony tak¿e <q>base64</q>, ale
 	 <em class="wazne">UWAGA: to nie jest szyfr!</em> To
 	 jest tylko rodzaj kodowania, jak alfabet Morse'a i <span class="b">ka¿dy mo¿e to odczytaæ</span>.
 	 Jest to po prostu zamiana danych w postaci binarnej (z <q>krzaczkami</q>) w³a¶nie
 	 na postaæ tekstow± ASCII (normalne litery i znaki).
	<BR><BR>
	Odszyfrowanie odbywa siê tak:<br>
	<code>openssl enc -bf -a -in dane.txt.bf -d -out dane</code><br>
	Opcja <CODE>-d</CODE> s³u¿y w³a¶nie do odszyfrowywania.
	<BR><BR>
 	</LI>
</OL>

<a name="szyfry08" id="szyfry08">Mo¿e siê zdarzyæ, ¿e chcemy</a> tylko cyfrowo podpisaæ jaki¶ plik, aby na przyk³ad umie¶ciæ go na swojej
 stronie WWW i daæ osobom go ¶ci±gaj±cym mo¿liwo¶æ weryfikacji, ¿e rzeczywi¶cie pochodzi od nas.<BR>
Aby utworzyæ taki podpis, wystarczy sama komenda podpisywania z punktu 1 lub 2 powy¿ej:<br>
<code lang="en">openssl smime -sign -in dane.txt -inkey nasz_klucz_pryw.pem -signer nasz_cert_publ.pem -out dane.txt.sig</code>
<br><br>Weryfikacja takiego podpisu:<br>
<code lang="en">openssl smime -verify -in dane.txt.sig -CAfile cert_publ_podpisujacego.pem -signer cert_publ_podpisujacego.pem</code>
<br><br>Jak widaæ, czasem trzeba powiedzieæ programowi openssl, jakim certyfikatom ufamy -
 w tym przypadku jest to certyfikat podpisuj±cy, ale mo¿e byæ te¿ nadrzêdny.

<BR><BR><BR><BR>
Je¶li zamiast cyfrowego podpisu chcecie tylko otrzymaæ sumê kontroln± z jakiego¶ pliku
 (zwan± czasem <q>odciskiem palca</q>), to
 najpierw sprawd¼cie, jakie macie dostêpne funkcje skrótu w swoim openssl:<br>
<code lang="en">openssl list-message-digest-commands</code><br><br>
Potem wystarczy wykonaæ na przyk³ad<br>
<code lang="en">openssl md5 dane.txt</code><br><br>
i dostajemy:<br>
<code>MD5(dane.txt)= 5bbd1174b345c17e9dac39e0da0002cd</code><br>
<em class="wazne">NIE</em> polecam funkcji skrótu
	<acronym title="Message Digest 2" lang="en">MD2</acronym>,
	MD4, MD5 i <acronym title="Secure Hash Algorithm 1" lang="en">SHA1</acronym>, gdy¿
	odkryto w nich pewne s³abo¶ci.










<!--  ===================================================================================== -->

<BR><BR>
<BR><BR>
<HR>
<h2 class="nag" lang="en"
><a name="pgp" id="pgp">Pretty Good Privacy (PGP) / GNU Privacy Guard (GPG)</a></h2>
<BR>
<a href="#dane" hreflang="pl" class="bezdruk">(przeskocz do szyfrowania plików)</a>
<BR><BR>

<A HREF="http://www.pgp.com" lang="en" hreflang="en">Pretty Good Privacy</A> i jego darmowy i wolny odpowiednik -
<A HREF="http://www.gnupg.org" lang="en" hreflang="en">GNU Privacy Guard</A> - GPG
(wersja dla <span lang="en">Windows</span>:
 <A HREF="http://www.gpg4win.org" lang="en" hreflang="en">gpg4win.org</A>)
równie¿ opieraj± siê
na parze kluczy: publicznym i prywatnym. Wszystkie zasady ochrony s±
takie same, jak wcze¶niej. Ale:
 <UL>
  <LI>Ró¿ni siê  sposób wyrabiania kluczy.</LI>
  <LI>Klucze wyrobione w standardzie PGP/<span lang="en">Open</span>PGP <em class="wazne">NIE</em>
  	s± zgodne z certyfikatami
  	<Acronym title="Public Key Cryptography System" lang="en">PKCS</acronym>,
	omówionymi wcze¶niej (z ¿adnym ich rodzajem, mimo i¿ na przyk³ad tu i tu s± klucze
	<acronym title="Rivest-Shamir-Adleman" lang="en">RSA</acronym>)</LI>
 </UL>

Wyrabianie kluczy przy u¿yciu PGP:<BR>
Je¶li macie program PGP dla <span lang="en">Windows</span> (jest te¿ wersja ca³kowicie darmowa:
<A HREF="http://www.pgp.com/downloads/freeware/freeware.html" lang="en" hreflang="en">PGP Freeware</A>),
 to wszystko mo¿na zrobiæ przy u¿yciu myszy, a sam
 program wspó³pracuje z wiêkszo¶ci± programów pocztowych i automatycznie podpisuje, sprawdza
 i szyfruje wiadomo¶ci. Nie bêdê siê wiêc zajmowa³ dalszym jego opisem.<BR><BR>

Je¶li korzystacie z ró¿nych graficznych nak³adek na gpg, to wyrobienie kluczy jest kwesti± kilku
 klikniêæ, wiêc nie bêdê siê tym zajmowa³ (tym bardziej ¿e takich interfejsów jest wiele). Poka¿ê za to,
 jak wyrabiaæ klucze samym programem gpg:<BR><BR>
Nale¿y wydaæ polecenie
<code>gpg --gen-key</code>,
a GPG dalej nas sam poprowadzi. W zasadzie nale¿y wybieraæ to, co jest domy¶lne (default),
 czyli ci±gle wciskaæ Enter.
Jedynie mo¿na sobie wybraæ d³u¿szy klucz (na przyk³ad 2048 bitów) zamiast domy¶lnych 1024 bitów.<BR>
Po zakoñczeniu tworzenia kluczy, mo¿emy wy¶wietliæ ich listê:
<code>gpg --list-keys</code>
<BR><BR>

<span class="b">Klucz prywatny</span> - s³u¿y do odszyfrowywania odebranych wiadomo¶ci oraz
 do cyfrowego podpisywania wysy³anych przez nas
wiadomo¶ci. Dziêki temu odbiorca wie, ¿e ich <em class="wazne">tre¶æ nie zosta³a zmieniona</em>
 po drodze oraz ¿e wiadomo¶æ rzeczywi¶cie <em class="wazne">pochodzi od Was</em>.
Musi wiêc byæ <em class="wazne">chroniony za wszelk± cenê!</em><BR><BR>

<span class="b">Klucz publiczny</span> - mo¿e byæ dowolnie rozdawany, gdy¿ to on umo¿liwia innym
wysy³anie nam zaszyfrowanych wiadomo¶ci oraz sprawdzania cyfrowego podpisu w
wiadomo¶ciach wys³anych przez nas. <em class="wazne">Musimy posiadaæ klucz publiczny
 osoby, do której chcemy wysy³aæ zaszyfrowane wiadomo¶ci.</em>
<BR><BR>

Po wyrobieniu kluczy, nale¿y dla bezpieczeñstwa (na przyk³ad aby móc je odzyskaæ w razie awarii)
 wyeksportowaæ swój klucz prywatny i publiczny:
	<BR><a href="#szyfry09" class="bezdruk">(przeskocz eksport kluczy)</a><Br>
<code lang="en">gpg --output klucz_gpg_pryw.asc --textmode --export-secret-keys --armor AABBCCDD</code><br>
<code lang="en">gpg --output klucz_gpg_publ.asc --textmode --export --armor AABBCCDD</code><br><br>
	  <a name="szyfry09" id="szyfry09">(w miejsce</a>
 AABBCCDD nale¿y wstawiæ numer swojego klucza uzyskany komend± <CODE>gpg --list-keys</code>).<BR>
Tak przygotowany plik klucz_gpg_publ.asc, zawieraj±cy klucz publiczny, mo¿na rozsy³aæ poczt± i umieszczaæ na publicznych
serwerach, stronach <acronym title="World Wide Web" lang="en">WWW</acronym> itp.,
 by jak najwiêcej osób mia³o do niego dostêp.
<BR><BR>
<em class="wazne">Plik klucz_gpg_pryw.asc zawiera wasz klucz prywatny, musi wiêc byæ
 dobrze chroniony.</em><BR><BR>

<em class="wazne">UWAGA:</em><BR>
 Klucz prywatny nale¿y zachowaæ w kilku bezpiecznych miejscach (na przyk³ad na p³ycie CD-R, któr± potem
starannie schowamy). <em class="wazne">NIGDY</em> nie nale¿y umieszczaæ swoich kluczy prywatnych na
¿adnych publicznie dostêpnych serwerach.<BR><BR>

Wiêkszo¶æ roboty (import kluczy, sprawdzanie podpisów, szyfrowanie) bêd± wykonywaæ za nas
programy pocztowe. Niektóre maj± wbudowan± obs³ugê GPG (na przyk³ad
<A HREF="http://sylpheed.good-day.net/" lang="en" hreflang="en">Sylpheed</A>), do niektórych
potrzebne s± zewnêtrzne modu³y, które te¿ bêd± automatycznie wykonywa³y robotê (na przyk³ad pine-pgp do
<A HREF="http://www.washington.edu/pine/" lang="en" hreflang="en"
><acronym lang="en" title="Program for Internet News and E-mail">PINE</acronym>'a</A>, czy
<A HREF="http://enigmail.mozdev.org" lang="en" hreflang="en">Enigmail</A> do
<A HREF="http://www.thunderbird.pl" lang="en" hreflang="en">Mozilli Thunderbirda</A>).<BR><BR>

 Aby móc uruchomiæ szyfrowan± korespondencjê, nale¿y wymieniæ siê z odbiorc± kluczami publicznymi, na przyk³ad
<UL>
 <LI>dostaæ osobi¶cie od tej osoby (na dyskietce, p³ycie, ...)</LI>
 <LI>poprosiæ go o wys³anie nam wiadomo¶ci z za³±cznikiem w postaci klucza w pliku .asc,
     który sami zaimportujemy.</LI>
 <LI>¶ci±gn±æ ze strony WWW tej osoby i zaimportowaæ rêcznie:
     <code>gpg --import plik_z_kluczem.asc</code></LI>
 <LI>¶ci±gn±æ z jednego z serwerów kluczy (je¶li znamy numer klucza, a w³a¶ciciel umie¶ci³ go na serwerze):
     <code>gpg --keyserver wwwkeys.pgp.net --recv-keys AABBCCDD</code></LI>
</UL>

Od tej pory wasza korespondencja nie bêdzie mog³a byæ przeczytana ani sfa³szowana przez innych.
<BR><BR>
<BR><BR>

Je¶li chcecie do kogo¶ rêcznie zaszyfrowaæ jaki¶ plik, niekoniecznie wysy³aj±c e-mail, mo¿ecie
 to zrobiæ na jeden z nastêpuj±cych sposobów. Odbiorcê mo¿ecie podaæ z nazwiska, numeru klucza
 lub adresu e-mail.
<OL>
 <LI>szyfrowanie kluczem publicznym odbiorcy i swoim (aby móc to potem rozszyfrowaæ),
  <span class="b">nierozs±dne bez podpisu</span>:
	<BR><a href="#szyfry10" class="bezdruk">(przeskocz szyfrowanie PGP bez podpisu)</a><Br>
	<code>gpg -a -e -r odbiorca1 -r odbiorca2 dane.txt</code>
     (jeden z odbiorców to Wy - podajecie swój e-mail lub numer klucza).<BR><br>
	Potem dajecie odbiorcom plik dane.txt.asc, który mo¿na rozszyfrowaæ tak:
	<code>gpg dane.txt.asc</code>
     Opcja <CODE>-a</CODE> powoduje, ¿e w pliku wyj¶ciowym bêd± tylko normalne znaki
     <acronym title="American Standard Code for Information Interchange" lang="en">ASCII</acronym>,
      ¿adnych krzaczków.
	Gdyby¶my nie podali <CODE>-a</CODE>, program gpg utworzy³by ten sam plik, ale w postaci binarnej:
 	dane.txt.gpg, zawieraj±cy krzaczki.<BR>
     Opcja <CODE>-e</CODE> oznacza w³a¶nie szyfrowanie (domy¶lne dzia³anie gpg to rozszyfrowywanie).<BR>
     Po opcji <CODE>-r</CODE> podajemy odbiorcê.<BR>
     Dziêki opcji <CODE>-R odbiorca2</CODE> (nie pokazanej tutaj) pozwala ukryæ informacjê,
      ¿e wiadomo¶æ zosta³a zaszyfrowana tak¿e do innych
      osób (<CODE>odbiorca2</CODE>), ni¿ g³ówny odbiorca.<BR>
     Dziêki opcji <CODE lang="en">--multifile</CODE> (nie pokazanej tutaj)
      mo¿na szyfrowaæ wiêcej ni¿ jeden plik na raz.
 	Dotyczy to tak¿e dalszych punktów.<BR><BR>
	</LI>

 <LI><a name="szyfry10" id="szyfry10">szyfrowanie kluczem publicznym</a> odbiorcy i swoim oraz cyfrowe podpisanie danych:
	<BR><a href="#szyfry11" class="bezdruk">(przeskocz rêczne szyfrowanie PGP z podpisem)</a><br>
	<code>gpg -a -e -s -r odbiorca1 -r odbiorca2 dane.txt</code><br><br>
	Rozszyfrowanie jak poprzednio, ale tutaj dodatkowo otrzymacie informacjê o podpisie.<BR>
	Opcja <CODE>-s</CODE> w³±cza cyfrowe podpisywanie danych. Upewni to odbiorcê, ¿e
	 <span class="b">wiadomo¶æ nie zosta³a sfa³szowana</span>.<BR><BR>
	</LI>

 <LI><a name="szyfry11" id="szyfry11">szyfrowanie na has³o</a> (szyfrem symetrycznym)
	<br><a href="#szyfry12" class="bezdruk">(przeskocz szyfrowanie PGP na has³o)</a><br>
 	Najpierw sprawdzamy, jakie szyfry symetryczne obs³uguje nasz program gpg:
 	<code>gpg --version</code>
 	(ogl±damy listê <q>Symetryczne</q> lub <q lang="en">Cipher</q>, w zale¿no¶ci od
 	 wersji jêzykowej programu).<BR>
 	Potem wybieramy jeden z nich, na przyk³ad <span lang="en">Blowfish</span>. Szyfrowanie odbywa siê tak:<br>
 	<code>gpg -a --cipher-algo blowfish -c dane.txt</code><br><br>
 	Opcja <CODE>-c</CODE> w³±cza szyfrowanie algorytmem symetrycznym.<BR>
 	Opcja <CODE lang="en">--cipher-algo</CODE> pozwala wybraæ algorytm szyfrowania.<BR>
 	Dla lepszego zabezpieczenia, <span class="b">mo¿na po³±czyæ ten sposób z powy¿szymi</span>.
 	 Dostaniemy wtedy plik, który mo¿na odszyfrowaæ zarówno has³em, jak i kluczem.
 	</LI>
 </OL>
<a name="szyfry12" id="szyfry12">Czêsto widaæ na stronach WWW</a>, ¿e obok ró¿nych plików do ¶ci±gniêcia,
 s± ich podpisy cyfrowe w osobnych plikach. Zrobienie takiego pliku nie jest trudne:<br>
 <code>gpg -a -b dane.txt</code><Br><br>
Opcja <CODE>-b</CODE> powoduje w³a¶nie utworzenie takiego oddzielnego pliku dane.txt.asc
 z podpisem dla pliku dane.txt.
 <em class="wazne">Sam plik dane.txt nie jest szyfrowany!</em><BR>
Gdyby¶my nie podali <CODE>-a</CODE>, program gpg utworzy³by ten sam plik z podpisem, ale w
 postaci binarnej: dane.txt.sig, zawieraj±cy krzaczki.<BR><BR>
Sprawdzenie takich podpisów jest te¿ ³atwe:

	<BR><a href="#szyfry13" class="bezdruk">(przeskocz weryfikacjê dobrego podpisu)</a>
<PRE title="prawid³owa weryfikacja podpisu">gpg --verify dane.txt.asc
gpg: Signature made sob 25 mar 2006 14:27:21 CET using DSA key ID 1C56DA1E
gpg: Good signature from <q>Bogdan Drozdowski &lt;xxxx@yy.pl&gt;</q></PRE>
	  <a name="szyfry13" id="szyfry13">Tutaj podpis</a>
jest prawid³owy (s³owo <CODE>Good</CODE>). Oznacza to, ¿e plik nie uleg³ zmianom
 od chwili jego podpisania.<BR><BR>
 Gdyby kto¶ go specjalnie zmieni³ (lub na przyk³ad wyst±pi³ b³±d w transmisji), podpis bêdzie
 nieprawid³owy (s³owo <CODE>BAD</CODE>):

	<BR><a href="#szyfry14" class="bezdruk">(przeskocz weryfikacjê z³ego podpisu)</a>
<PRE title="nieprawid³owa weryfikacja podpisu">gpg --verify dane.txt.asc
gpg: Signature made sob 25 mar 2006 14:27:21 CET using DSA key ID 1C56DA1E
gpg: BAD signature from <q>Bogdan Drozdowski &lt;xxxx@yy.pl&gt;</q></PRE>


<BR><BR><BR><BR>
	  <a name="szyfry14" id="szyfry14">Je¶li</a>
zamiast cyfrowego podpisu chcecie tylko otrzymaæ sumê kontroln± z jakiego¶ pliku
 (zwan± czasem <q>odciskiem palca</q>), to
 najpierw sprawd¼cie, jakie macie dostêpne funkcje skrótu w swoim gpg:
<code>gpg --version</code>
 	(ogl±damy listê <q>Skrótów</q> lub <q lang="en">Hash</q>, w zale¿no¶ci od wersji
 	jêzykowej programu).<BR>

Potem wystarczy wykonaæ na przyk³ad<Br>
<code>gpg --print-md sha512 dane.txt</code><br><br>
i dostajemy:
	<BR><a href="#szyfry15" class="bezdruk">(przeskocz przyk³ad sumy kontrolnej)</a>
<PRE title="przyk³ad sumy kontrolnej SHA-512">dane.txt: DB1B46EE C66D6574 ABE6FC48 7EA40F63 B148DAB8 9F9F7142 BDC5E9F6
          55B2924B 71D5C017 04945C48 0EEC28CC E0A7F41B 2BBAEB5A 7DADC7FD
          E0B47FCE 3529F58B</PRE>
<a name="szyfry15" id="szyfry15"><em class="wazne">NIE</em> polecam funkcji</a> skrótu
<acronym title="Message Digest 5" lang="en">MD5</acronym> i
 <acronym title="Secure Hash Algorithm 1" lang="en">SHA1</acronym>, gdy¿ odkryto w nich pewne s³abo¶ci.



<!--  ===================================================================================== -->

<BR><BR>
<HR>
<h2 class="nag"><a name="dane" id="dane">Szyfrowanie danych na dysku</a></h2>
<BR>
<a href="#trans" hreflang="pl" class="bezdruk">(przeskocz do zabezpieczania transmisji)</a>
<BR><BR>
Nawet je¶li nie musicie szyfrowaæ poczty, to czêsto jest potrzeba zaszyfrowania
 samych danych na dysku (informacji poufnych, ¶ci±gniêtej niezaszyfrowanej poczty, historii
 przegl±danych stron internetowych, tre¶ci prowadzonych rozmów).
 Jest na to wiele sposobów.
<ol>
 <li>Szyfrowanie na has³o.<br><br>
 Powy¿ej poda³em dwa
 sposoby szyfrowania na has³o. Niestety, je¶li chcemy szyfrowaæ w ten sposób wiele
 plików, to te czynno¶ci staj± siê nudne, czasoch³onne i ³atwo siê pomyliæ. Najwygodniej
 jest na przyk³ad spakowaæ wszystkie poufne pliki w jedno archiwum. Je¶li wybierzemy format ZIP
 lub <a href="http://www.7-zip.org/" hreflang="en">7zip</a>,
 szyfrowanie mo¿na w³±czyæ ju¿ w czasie pakowania. Inne spakowane archiwa mo¿na rêcznie
 zaszyfrowaæ na has³o jednym z podanych sposobów. Dziêki temu has³o jest wpisywane tylko raz.<br>
 Ma to jednak pewn± wadê: po skorzystaniu z plików nale¿y je ponownie spakowaæ i usun±æ z
 dysku. Jak wiemy, samo usuniêcie pliku nie wystarcza, gdy¿ tak naprawdê jest usuwana informacja
 o samym istnieniu pliku, za¶ jego <em class="wazne">zawarto¶æ nadal pozostaje na dysku</em>.
 Tak± zawarto¶æ mo¿na
 odzyskaæ nawet po 2-3 zamazaniach. Dlatego niezbêdne jest <em class="wazne">bezpieczne usuwanie
 plików</em> (jednym z wielu dostêpnych darmowych programów, na przyk³ad <code>shred</code> w Linuksie)
 i zamazanie wolnego miejsca na dysku raz na jaki¶ czas.

 <br><br></li>
 <li>Szyfrowanie partycji, ca³ego dysku twardego lub urz±dzeñ wymiennych.<br><br>
 Zamiast ci±gle pakowaæ i rozpakowywaæ archiwum z tajnymi plikami, wygodniejsze mo¿e byæ
  za³o¿enie sobie szyfrowanej partycji dysku twardego (lub nawet ca³ego dysku) lub
  ca³ego urz±dzenia przeno¶nego (na przyk³ad dysk wymienny na USB). Po podaniu has³a takie urz±dzenie
  by³oby widoczne w systemie jak normalny dysk twardy, z pe³n± mo¿liwo¶ci± kopiowania, zapisywania
  i usuwania danych.<br>
 Pod Linuksem s± co najmniej dwa narzêdzia oferuj±ce tak± funkcjonalno¶æ: <code>losetup</code> oraz
  <code>cryptsetup-luks</code>, ale ja zalecam otwarty program <a href="http://www.truecrypt.org/"
  hreflang="en" lang="en">TrueCrypt</a>, który dzia³a pod Linuksem i Windows, a jest do¶æ
  ³atwy w obs³udze - pod Windows ma nawet interfejs graficzny, pod Linuksem wystarczy
  uruchomiæ <code>truecrypt --create</code>, a program dalej poprowadzi u¿ytkownika.<br><br>
   Pod Linuksem stworzone
  pliki TrueCrypt montowaæ nale¿y poprzez <code>truecrypt -u plikTrueCrypt katalogMontowania</code>,
  za¶ sam program truecrypt powinien móc byæ uruchamiany z prawami administratora przez
  zwyk³ego u¿ytkownika. W starszych wersjach programu wystarczy³o ustawiæ bit suid komendami
  wydanymi <span class="b">jako root</span>:<Br>
  <code>chown root.root /¶cie¿ka/do/truecrypt</code><br>
  <code>chmod +s /¶cie¿ka/do/truecrypt</code><br>
  <code>chmod o+x /¶cie¿ka/do/truecrypt</code><br>
  <br>
  Nowsze wersje jednak bardziej dbaj± o bezpieczeñstwo i bit suid ju¿ jest zabroniony. Zamiast tego,
  TrueCrypt powinien móc sam siê uruchomiæ u¿ywaj±c komendy suid. Aby na to zezwoliæ,
  <span class="b">jako root</span> wydajemy komendê <code>visudo</code>. Otwiera ona plik
  /etc/sudoers w trybie edycji i sprawdzania sk³adni przy wyj¶ciu (bardzo wa¿ne).
  Nale¿y dodaæ nastêpuj±ce linijki:
  <pre>
User_Alias         TrueCrypt = nazwa_uzytkownika1, nazwa_uzytkownika2, ...
Defaults:TrueCrypt !authenticate
TrueCrypt          localhost = (root) /usr/bin/truecrypt</pre>

  Wpisuj±c oczywi¶cie prawid³owe nazwy u¿ytkowników i ¶cie¿kê do TrueCrypt.
  <br><br>
  Niestety, modu³ j±dra musi byæ w /usr/share/truecrypt/kernel, chyba ¿e zmienimy to w kodzie programu.
  Na szczê¶cie zawsze mo¿na zrobiæ z tego dowi±zanie symboliczne do innego katalogu, wiêc to nie
   jest du¿y problem.<br><br>

  <span class="b">Po skoñczeniu pracy szyfrowan± partycjê w Linuksie nale¿y odmontowaæ poleceniem
   <code>truecrypt -d katalogMontowania</code></span>

  <br><br>

 Jeszcze jedna uwaga: <em class="wazne">nie wolno normalnie przenosiæ plików na
  zaszyfrowan± partycjê</em>. Przeniesienie plików mo¿e spowodowaæ ich skopiowanie, po czym
  normalne usuniêcie na dysku ¼ród³owym (dziêki czemu mo¿na by³oby je odzyskaæ).
  Nale¿y zamiast tego <em class="wazne">skopiowaæ</em>
  te pliki, po czym <em class="wazne">bezpiecznie je usun±æ</em> z dysku ¼ród³owego.

   <br><br>
   Trochê informacji o szyfrowaniu partycji jest te¿ w dokumencie o
   <a href="https://wiki.torproject.org/noreply/TheOnionRouter/OperationalSecurity"
   hreflang="en">zabezpieczaniu serwera Tor</a>. O samym programie Tor czytaj
	<a href="#trans" hreflang="pl">poni¿ej</a>, w sekcji o zabezpieczaniu transmisji.


  <br><br></li>

 <li>Szyfrowanie pliku lub partycji wymiany (<span lang="en">swap</span>).<br><br>
  Mogliby¶cie spytaæ, po co to. Za³ó¿my, ¿e w³a¶nie macie uruchomiony program pracuj±cy na
   którym¶ z poufnych plików. Za chwilê uruchomicie inny du¿y program (pakiet biurowy,
   przegl±darkê, ...). Spowoduje to, ¿e na wszystkie uruchomione programy nie wystarczy
   pamiêci w komputerze. System operacyjny w takiej sytuacji przeniesie czê¶æ waszego
   wa¿nego programu (a pewnie i czê¶æ owych poufnych danych) na dysk, do pliku wymiany, co jest
   zupe³nie normalnym dzia³aniem. Teraz poufne dane le¿± niezaszyfrowane na dysku i ka¿dy mo¿e
   je odczytaæ. Za
   jaki¶ czas te dane zostan± stamt±d usuniête (mo¿e dopiero po kolejnym w³±czeniu
   komputera?), ale nie jest to usuwanie bezpieczne. Oryginalne dane dalej mog± sobie byæ
   na szyfrowanej partycji, ale w niezaszyfrowanej postaci mo¿na je odzyskaæ z dysku.
   <br><br> Jak siê przed tym broniæ? Za³o¿yæ szyfrowan± pamiêæ wymiany.<br><br>

   <ul>
   <li><span lang="en">Windows</span>:
      przeczytaj odpowiedni± sekcjê dokumentu o
        <a href="https://wiki.torproject.org/noreply/TheOnionRouter/OperationalSecurity"
   	hreflang="en">zabezpieczaniu serwera Tor</a>. O samym programie Tor czytaj poni¿ej, w sekcji o
   	zabezpieczaniu transmisji.
	<br><br></li>

   <li><span lang="en">OS X</span>:
      przeczytaj odpowiedni± sekcjê dokumentu o
        <a href="https://wiki.torproject.org/noreply/TheOnionRouter/OperationalSecurity"
   	hreflang="en">zabezpieczaniu serwera Tor</a>. O samym programie Tor czytaj poni¿ej, w sekcji o
   	zabezpieczaniu transmisji.
	<br><br></li>

   <li>OpenBSD: w opcjach systemowych /etc/sysctl.conf ustaw
   	<code lang="en">vm.swapencrypt.enable=1</code>.
        Przeczytaj te¿ odpowiedni± sekcjê dokumentu o
        <a href="https://wiki.torproject.org/noreply/TheOnionRouter/OperationalSecurity"
   	hreflang="en">zabezpieczaniu serwera Tor</a>. O samym programie Tor czytaj poni¿ej, w sekcji o
   	zabezpieczaniu transmisji.
   	<br><br></li>

   <li><a href="http://www.freebsd.org/doc/en_US.ISO8859-1/books/handbook/swap-encrypting.html"
   	hreflang="en" lang="en">Szyfrowana pamiêæ wymiany we FreeBSD</a>.
        Przeczytaj te¿ odpowiedni± sekcjê dokumentu o
        <a href="https://wiki.torproject.org/noreply/TheOnionRouter/OperationalSecurity"
   	hreflang="en">zabezpieczaniu serwera Tor</a>. O samym programie Tor czytaj poni¿ej, w sekcji o
   	zabezpieczaniu transmisji.
   	<br><br></li>

   <li>Linux: skorzystaæ z programu <code>losetup</code>, <code>cryptsetup-luks</code> lub ze
    skryptów <a href="http://www.flyn.org/projects/cryptoswap/index.html" hreflang="en"
    lang="en">CryptoSwap</a>.<br><br>
     Przyk³adowe wykorzystanie cryptsetup: w pliku startowym
    zawieraj±cym uruchamianie pamiêci wymiany (na przyk³ad /etc/rc.sysinit), tu¿ PRZED lini± uruchamiaj±c±
    pamiêæ wymiany (linia z komend± <span class="b" lang="en">swapon</span>), dopiszcie:<br>
    <code lang="en">cryptsetup -c blowfish -d /dev/urandom create swap /dev/hdXY</code><br>
    <code lang="en">mkswap /dev/mapper/swap > /dev/null</code><br>
    zamieniaj±c, rzecz jasna, /dev/hdXY na Wasz± partycjê wymiany lub nazwê pliku wymiany.
    Po tych zmianach nale¿y otworzyæ plik /etc/fstab i zmieniæ urz±dzenie wymiany, na przyk³ad z<Br>
    <code lang="en">/dev/hdXY      swap       swap    defaults        0 0</code><br>
    na<br>
    <code lang="en">/dev/mapper/swap    swap      swap    defaults        0 0</code><br>
    W pliku uruchamianym przy zamykaniu systemu i odpowiedzialnym za wy³±czenie pamiêci wymiany
    (na przyk³ad /etc/rc.d/init.d/halt), tu¿ PO linii wy³±czaj±cej pamiêæ wymiany (linia z komend±
    <span class="b" lang="en">swapoff</span>) nale¿y dopisaæ:
    <code lang="en">cryptsetup remove swap</code><br>
    Po ponownym uruchomieniu systemu pamiêæ wymiany bêdzie szyfrowana wybranym algorytmem i za
    ka¿dym razem innym, losowym kluczem.<Br>
    <br>
    Dla bezpieczeñstwa mo¿na aktualn± partycjê wymiany zamazaæ poleceniem <code>shred</code>
    (najlepiej robiæ to, gdy jest nieu¿ywana, na przyk³ad gdy system zosta³ uruchomiony tylko w trybie
    tekstowym lub po komendzie <span class="b">telinit 3</span>):<br>
    <code lang="en">swapoff /dev/hdXY</code><br>
    <code lang="en">shred /dev/hdXY</code><br>
    Oczywi¶cie, po tej operacji nie ma ju¿ partycji wymiany, wiêc najlepiej wykonaæ j± ju¿ po
    powy¿szych zmianach w plikach systemowych, po czym ponownie uruchomiæ system.
    <br><br>
    Przeczytaj te¿ odpowiedni± sekcjê dokumentu o
        <a href="https://wiki.torproject.org/noreply/TheOnionRouter/OperationalSecurity"
   	hreflang="en">zabezpieczaniu serwera Tor</a>. O samym programie Tor czytaj poni¿ej, w sekcji o
   	zabezpieczaniu transmisji.
    </li>
   </ul>

 </li>
</ol>




<!--  ===================================================================================== -->

<BR><BR>
<HR>
<h2 class="nag"><a name="trans" id="trans">Zabezpieczanie transmisji</a></h2>
<BR>
<a href="#jakdziala" hreflang="pl" class="bezdruk">(przeskocz do odno¶ników do algorytmów)</a>
<BR><BR>

 Szyfrowanie danych na dysku nic nie da, je¶li s± one wysy³ane przez sieæ w postaci jawnej. Nie
mówiê tutaj o poczcie, któr± po lekturze poprzednich sekcji umiemy ju¿ szyfrowaæ. Mówiê tu
o takich sprawach jak: has³a do poczty i na inne strony WWW, rozmowy w komunikatorze, oraz same
odwiedzane strony internetowe. Je¶li po³±czenie jest nieszyfrowane, ka¿dy mo¿e zobaczyæ Wasze has³a,
przeczytaæ tre¶æ rozmów i dowiedzieæ siê, jakie strony ogl±dacie. Jak siê przed tym broniæ?
Nale¿y szyfrowaæ wszelkie wysy³ane dane. Zobaczmy, co mo¿na zrobiæ w tej kwestii.

<ol>
 <li>Przegl±danie WWW (w tym poczty).<Br><br>

   Je¶li serwer, z którym siê ³±czycie, ma obs³ugê
    <acronym title="Secure Sockets Layer" lang="en">SSL</acronym>/
    <acronym title="Transport Layer Security" lang="en">TLS</acronym>, to od tej pory u¿ywajcie bezpiecznych
    po³±czeñ, wpisuj±c HTTPS zamiast HTTP w pasku adresu w przegl±darce. Protoko³u SSL/TLS nale¿y
    bezwzglêdnie korzystaæ w czasie przegl±dania stron swojego banku oraz (je¶li mo¿liwe) poczty.<br>
   Aby sprawdziæ, czy serwer to obs³uguje, wpisz HTTPS zamiast HTTP w polu adresu i sprawd¼, czy
    przegl±darka siê po³±czy normalnie.
   <br><br></li>

 <li>Poczta w programach pocztowych<br><br>

   Dobre skrzynki pocztowe (na przyk³ad o2.pl) oferuj± po³±czenia szyfrowane POP3+SSL/TLS (port 995/110)
    i SMTP+SSL/TLS (port 25). Nale¿y bezwzglêdnie w³±czyæ je w swoim programie pocztowym. Po³±czenie
    SSL jest czêsto nazywane <q>bezpiecznym po³±czeniem</q>, a TLS <q>bezpiecznym uwierzytelnianiem
    (has³a)</q>.<br>
   Je¶li serwer pocztowy tego nie obs³uguje, mo¿na rozwa¿yæ przesiadkê na inny. Je¶li skrzynka to
    obs³uguje, a program nie, nale¿y koniecznie zmieniæ program na bardziej bezpieczny. Polecam
    <a href="http://www.thunderbird.pl/" hreflang="pl">Mozilla Thunderbird</a>.
   <br><br></li>

 <li>Komunikator<br><br>

   Je¶li u¿ywasz popularnego <q>s³oneczka</q>, to wiedz, ¿e wprowadzenie szyfrowania
    jest w trakcie... ju¿ od d³u¿szego czasu.
    Stan wprowadzenia ani stopieñ zabezpieczenia s± nieznane. Szyfrowanie od odbiorcy do nadawcy
    mo¿na wprowadziæ, ale jest to sprzeczne z regulaminem. Pomy¶l o zmianie komunikatora i czytaj dalej.
   <br><br>
   Je¶li u¿ywasz Tlenu, mo¿esz czuæ siê po³owicznie bezpieczny. Twoje rozmowy s± szyfrowane na
    drodze od Ciebie do serwera i od serwera do odbiorcy wiadomo¶ci. Na serwerze mo¿na je jednak
    zobaczyæ w postaci jawnej. Ale i tak znacznie lepiej ni¿ s³onko. Tlen jest z rodziny Jabbera
    (czytaj ni¿ej), ale portal o2.pl zdecydowa³ siê samolubnie go zamkn±æ i rozszerzaæ,
    nie dziel±c siê osi±gniêciami ze spo³eczno¶ci±, od której otrzyma³ Jabbera. Zamkniêcie protoko³u
    zawsze wprowadza pewn± niepewno¶æ.
   <br><br>
   Je¶li u¿ywasz <A HREF="http://www.jabberpl.org" hreflang="pl">Jabbera</A>, mo¿esz czuæ siê
    jeszcze bezpieczniejszy. Protokó³ Jabbera jest miêdzynarodowy, otwarty i ma wbudowane zabezpieczenia.
    Twoje rozmowy s± szyfrowane na drodze od Ciebie do serwera i od serwera do odbiorcy wiadomo¶ci.
    Na serwerze mo¿na je jednak zobaczyæ w postaci jawnej.<br>
    Jabber ma jednak wspania³± cechê: wbudowan± obs³ugê PGP - tego samego, którego wcze¶niej siê
    uczyli¶my w celu zabezpieczenia poczty. Po w³±czeniu SSL i PGP Twoje rozmowy s± szyfrowane
    na drodze do serwera jednym kluczem, na drodze od serwera do odbiorcy - innym i na drodze od
    nadawcy do odbiorcy - kluczem PGP. Je¶li wiadomo¶æ musi byæ przechowana na serwerze, to jest
    tam zaszyfrowana kluczem PGP i niemo¿liwa do odczytania. <Br>
    <span class="b">Jabber z w³±czonymi SSL i PGP gwarantuje najwiêksze bezpieczeñstwo rozmów</span>.
   <br><br></li>

 <li>Anonimowo¶æ<br><br>

   Czasem samo szyfrowanie przesy³anych tre¶ci nie wystarcza. Przegl±darka i tak zdradzi, z jakim
    serwerem chcemy siê po³±czyæ oraz nasz adres IP, a komunikator zdradzi nasz adres IP. Czasem sama
    wiedza o tym, z jakimi stronami WWW siê ³±czymy pozwala wyci±gn±æ o nas wnioski (w którym banku
    mamy konto, na którym serwerze skrzynkê, na które forum piszemy). Na szczê¶cie i przed tym mo¿na
    siê broniæ.<br>
    Rozwi±zaniem s± ró¿ne programy anonimizuj±ce nasze dzia³ania w sieci. Jednym z takich programów
    jest darmowy i otwarty Tor (<a href="https://www.torproject.org/" hreflang="pl"
    >torproject.org</a>), wspierany przez
    <span lang="en">Electronic Frontier Foundation</span>, która broni praw cz³owieka w sieci. Zasada
    dzia³ania jest prosta: zamiast ³±czyæ siê bezpo¶rednio z serwerem docelowym, nasze programy
    najpierw ³±cz± siê z zainstalowanym u nas Torem, a ten przez sieæ serwerów na ca³ym ¶wiecie
    przekierowuje nasz ruch do serwera docelowego. Ca³y ruch, a¿ od ostatniego wêz³a do serwera
    docelowego, jest szyfrowany (je¶li ³±czysz siê przez SSL lub TLS, ca³y ruch jest szyfrowany).
    Serwerowi docelowemu wydaje siê, ¿e ³±czysz siê z innego adresu ni¿ naprawdê. I o to chodzi.
    Instalacja Tora jest prosta, konfiguracja programów, by go u¿ywa³y - te¿. Polecam; strona
    projektu jest po polsku.
   <br><br></li>

</ol>


<!--  ===================================================================================== -->

<BR><BR>
<HR>
<h2 class="nag"><a name="jakdziala" id="jakdziala">Jak to wszystko naprawdê dzia³a</a></h2>
<BR>
O tym, czym s± te dziwne nazwy (MD5, SHA, RSA, DSA, El-Gamal, PKCS), mo¿ecie siê dowiedzieæ
na przyk³ad st±d:
<UL>
 <LI>Polski leksykon bezpieczeñstwa: <A HREF="http://ipsec.pl/leksykon/" hreflang="pl">IPSec.pl</A>
 <LI>Dokument <q>Najczê¶ciej zadawane pytania</q> firmy
	<A HREF="http://www.rsasecurity.com/rsalabs/node.asp?id=2152" lang="en"
 	 hreflang="en">RSA Security</A> (po angielsku).</LI>
 <LI><A HREF="http://www.cacr.math.uwaterloo.ca/hac/"
	 hreflang="en">Podrêcznik Kryptografii Stosowanej</A> (po angielsku).</LI>
</UL>

<Br><br>
<div class="bezdruk">
<A accesskey="1" hreflang="pl" href="index.htm">Spis tre¶ci off-<span lang="en">line</span></a> (Alt+1)<BR>
<A accesskey="2" hreflang="pl" href="index.php">Spis tre¶ci on-<span lang="en">line</span></a> (Alt+2)<br>
<A accesskey="0" hreflang="pl" href="ulatwie.htm">U³atwienia dla niepe³nosprawnych</a> (Alt+0)<BR>
</div>

</BODY></HTML>
